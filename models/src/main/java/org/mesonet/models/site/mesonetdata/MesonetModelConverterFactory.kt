package org.mesonet.models.site.mesonetdataimport okhttp3.ResponseBodyimport retrofit2.Converterimport retrofit2.Retrofitimport java.lang.reflect.Typeclass MesonetModelConverterFactory: Converter.Factory(){    override fun responseBodyConverter(type: Type, annotations: Array<Annotation>, retrofit: Retrofit): Converter<ResponseBody, MesonetData>    {        if(annotations.any{ it is MesonetDataConverter })            return MesonetModelConverter()        return retrofit.nextResponseBodyConverter(this, type, annotations)    }    class MesonetModelConverter: Converter<ResponseBody, MesonetData> {        override fun convert(value: ResponseBody?): MesonetData {            val model = MesonetModel()            try {                if (value != null) {                    val fields = MesonetModel::class.java.declaredFields                    val string = value.string()                    for (i in fields.indices) {                        if(!string.contains(fields[i].name))                            continue                        val indexOfFieldInString = string.indexOf(fields[i].name + "=")                        val endOfFieldInString = string.indexOf(",", indexOfFieldInString)                                                val strField = string.substring(indexOfFieldInString, endOfFieldInString).split("=".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()                        if (strField.size != 2)                            continue                        val fieldValue = strField[1]                                                fields[i].isAccessible = true                        if (fields[i].type == Long::class.javaPrimitiveType ||                                fields[i].type == Long::class.javaObjectType ||                                fields[i].type == Long::class) {                            try {                                fields[i].set(model, java.lang.Long.parseLong(fieldValue))                            } catch (e: IllegalAccessException) {                                e.printStackTrace()                            } catch (e: IllegalArgumentException) {                                e.printStackTrace()                            }                            finally {                                continue                            }                        }                        if (fields[i].type == Number::class.javaPrimitiveType ||                                fields[i].type == Number::class.javaObjectType ||                                fields[i].type == Number::class) {                            try {                                fields[i].set(model, java.lang.Double.parseDouble(fieldValue))                            } catch (e: IllegalAccessException) {                                e.printStackTrace()                            } catch (e: IllegalArgumentException) {                                e.printStackTrace()                            }                            finally {                                continue                            }                        }                        if (fields[i].type == String::class.javaPrimitiveType ||                                fields[i].type == String::class.javaObjectType ||                                fields[i].type == String::class) {                            try {                                fields[i].set(model, fieldValue)                            } catch (e: IllegalAccessException) {                                e.printStackTrace()                            } catch (e: IllegalArgumentException) {                                e.printStackTrace()                            }                            finally {                                continue                            }                        }                        fields[i].isAccessible = false                    }                }            }            finally {                value?.close()            }            return model        }    }}